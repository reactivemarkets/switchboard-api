// Copyright Â© 2022 Reactive Markets. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// See https://developer.reactivemarkets.com for documentation.

include "Enum.fbs";

namespace Switchboard;

struct QuoteEntry {
    /// Bitset describing conditions of the quote.
    conditions: ushort;
    /// Size of the QuoteEntry.
    size: double;
    /// Price of the QuoteEntry.
    price: double;
    /// Forward points of the QuoteEntry.
    fwd_points: double;
    /// Swap only, far leg size.
    far_size: double;
    /// Swap only, far leg price.
    far_price: double;
    /// Swap only, far leg forward points.
    far_fwd_points: double;
    /// Swap points of the QuoteEntry.
    swap_points: double;
}

table Quote {
    /// Source system timestamp.
    orig_time: long;
    /// Trading account.
    account: string (required);
    /// Instrument symbol.
    symbol: string (required);
    /// Tenor symbol.
    tenor: string;
    /// Security Type. defaults to Spot.
    security_type: SecurityType = Spot;
    /// Request identifier specified on the Quote Request.
    req_id: string (required);
    /// Unique identifier that will be supplied with every Quote.
    quote_id: string;
    /// Exchange or venue symbol.
    venue: string (required);
    /// Quote expiry time.
    expiry_time: long;
    /// Quote currency.
    ccy: string;
    /// Unique identifier.
    entry_id: string;
    /// The fixing date in YYYYMMDD format.
    fixing_date: int;
    /// The settlement date in YYYYMMDD format.
    settlement_date: int;
    /// Swaps only, fixing date in YYYYMMDD format.
    far_fixing_date: int;
    /// The settlement date in YYYYMMDD format.
    far_settlement_date: int;
    /// Swaps only, far leg tenor.
    far_tenor: string;
    /// Bid quote entries.
    bid: [QuoteEntry];
    /// Offer quote entries.
    offer: [QuoteEntry];
    /// Dodd-Frank mid price.
    mid_price: double;
    /// Swaps only, far leg Dodd-Frank mid price
    far_mid_price: double;
    /// Swaps only, Dodd-Frank mid swap points
    mid_swap_points: double;
}
